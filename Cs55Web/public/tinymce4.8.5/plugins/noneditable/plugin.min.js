!(function() { 'use strict'; var t = tinymce.util.Tools.resolve('tinymce.PluginManager'), c = tinymce.util.Tools.resolve('tinymce.util.Tools'), l = function(t) { return t.getParam('noneditable_noneditable_class', 'mceNonEditable') }, u = function(t) { return t.getParam('noneditable_editable_class', 'mceEditable') }, f = function(t) { var n = t.getParam('noneditable_regexp', []); return n && n.constructor === RegExp ? [n] : n }, s = function(n) { return function(t) { return (' ' + t.attr('class') + ' ').indexOf(n) !== -1 } }, d = function(i, o, c) { return function(t) { var n = arguments, e = n[n.length - 2], r = e > 0 ? o.charAt(e - 1) : ''; if (r === '"') return t; if (r === '>') { var a = o.lastIndexOf('<', e); if (a !== -1 && o.substring(a, e).indexOf('contenteditable="false"') !== -1) return t } return '<span class="' + c + '" data-mce-content="' + i.dom.encode(n[0]) + '">' + i.dom.encode(typeof n[1] === 'string' ? n[1] : n[0]) + '</span>' } }, n = function(n) { var t, e, r = 'contenteditable'; t = ' ' + c.trim(u(n)) + ' ', e = ' ' + c.trim(l(n)) + ' '; var a = s(t), i = s(e), o = f(n); n.on('PreInit', function() { o.length > 0 && n.on('BeforeSetContent', function(t) { !(function(t, n, e) { var r = n.length, a = e.content; if (e.format !== 'raw') { for (;r--;)a = a.replace(n[r], d(t, a, l(t))); e.content = a } }(n, o, t)) }), n.parser.addAttributeFilter('class', function(t) { for (var n, e = t.length; e--;)n = t[e], a(n) ? n.attr(r, 'true') : i(n) && n.attr(r, 'false') }), n.serializer.addAttributeFilter(r, function(t) { for (var n, e = t.length; e--;)n = t[e], (a(n) || i(n)) && (o.length > 0 && n.attr('data-mce-content') ? (n.name = '#text', n.type = 3, n.raw = !0, n.value = n.attr('data-mce-content')) : n.attr(r, null)) }) }) }; t.add('noneditable', function(t) { n(t) }) }())
